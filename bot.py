"""
Telegram-–±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot v20+ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º API.
"""

import asyncio
import logging
import os
from datetime import datetime, timedelta, time
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ConversationHandler, ContextTypes
)

from database import init_database, close_database, add_booking, check_booking_conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TEST_BOT_API")

if not BOT_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TEST_BOT_API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_DATE, SELECTING_TIME = range(2)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)
TIME_SLOTS = [
    "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", 
    "16:00", "17:00", "18:00", "19:00", "20:00", "21:00"
]

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —á–∞—Å–∞—Ö)
BOOKING_DURATION = 2


def get_date_buttons() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã (–±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π).
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏
    """
    keyboard = []
    today = datetime.now().date()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 7 –¥–Ω–µ–π
    for i in range(7):
        date = today + timedelta(days=i)
        button_text = date.strftime("%d.%m (%a)")
        callback_data = f"date_{date.strftime('%Y-%m-%d')}"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    return InlineKeyboardMarkup(keyboard)


def get_time_buttons() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    """
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i in range(0, len(TIME_SLOTS), 2):
        row = []
        for j in range(2):
            if i + j < len(TIME_SLOTS):
                time_slot = TIME_SLOTS[i + j]
                row.append(InlineKeyboardButton(time_slot, callback_data=f"time_{time_slot}"))
        keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π! üé®\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/book - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    
    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    """
    help_text = (
        "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/book - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üí° –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /book –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞."
    )
    
    await update.message.reply_text(help_text)


async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.
    
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
    """
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['user_id'] = user.id
    context.user_data['username'] = user.username or user.first_name
    
    message = (
        "üìÖ –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )
    
    keyboard = get_date_buttons()
    await update.message.reply_text(message, reply_markup=keyboard)
    
    return SELECTING_DATE


async def date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    date_str = query.data.split('_')[1]  # "date_2024-01-15" -> "2024-01-15"
    selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_date'] = selected_date
    
    message = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date.strftime('%d.%m.%Y')}\n\n"
        "üïê –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    keyboard = get_time_buttons()
    await query.edit_message_text(message, reply_markup=keyboard)
    
    return SELECTING_TIME


async def time_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Returns:
        int: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ConversationHandler
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
    time_str = query.data.split('_')[1]  # "time_14:00" -> "14:00"
    hour, minute = map(int, time_str.split(':'))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = context.user_data['user_id']
    username = context.user_data['username']
    selected_date = context.user_data['selected_date']
    
    # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    start_time = datetime.combine(selected_date, time(hour, minute))
    end_time = start_time + timedelta(hours=BOOKING_DURATION)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
    has_conflict = await check_booking_conflict(start_time, end_time)
    
    if has_conflict:
        message = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /book"
        )
        await query.edit_message_text(message)
        return ConversationHandler.END
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await add_booking(user_id, username, start_time, end_time)
    
    if success:
        message = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n"
            f"üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {time_str} - {(start_time + timedelta(hours=BOOKING_DURATION)).strftime('%H:%M')}\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {BOOKING_DURATION} —á–∞—Å–∞\n\n"
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π! üé®"
        )
    else:
        message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /book"
        )
    
    await query.edit_message_text(message)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Returns:
        int: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ConversationHandler
    """
    await update.message.reply_text(
        "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /book"
    )
    return ConversationHandler.END


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
    """
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_conversation = ConversationHandler(
        entry_points=[CommandHandler("book", book_start)],
        states={
            SELECTING_DATE: [CallbackQueryHandler(date_selected, pattern="^date_")],
            SELECTING_TIME: [CallbackQueryHandler(time_selected, pattern="^time_")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="booking_conversation",
        persistent=False,
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(booking_conversation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async def post_init(application):
        await init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.post_init = post_init
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
